-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity targeted_function is
generic (
    C_S_AXI_RM_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_RM_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_rm_AWVALID : IN STD_LOGIC;
    s_axi_rm_AWREADY : OUT STD_LOGIC;
    s_axi_rm_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_RM_ADDR_WIDTH-1 downto 0);
    s_axi_rm_WVALID : IN STD_LOGIC;
    s_axi_rm_WREADY : OUT STD_LOGIC;
    s_axi_rm_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_RM_DATA_WIDTH-1 downto 0);
    s_axi_rm_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_RM_DATA_WIDTH/8-1 downto 0);
    s_axi_rm_ARVALID : IN STD_LOGIC;
    s_axi_rm_ARREADY : OUT STD_LOGIC;
    s_axi_rm_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_RM_ADDR_WIDTH-1 downto 0);
    s_axi_rm_RVALID : OUT STD_LOGIC;
    s_axi_rm_RREADY : IN STD_LOGIC;
    s_axi_rm_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_RM_DATA_WIDTH-1 downto 0);
    s_axi_rm_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_rm_BVALID : OUT STD_LOGIC;
    s_axi_rm_BREADY : IN STD_LOGIC;
    s_axi_rm_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of targeted_function is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "targeted_function,hls_ip_2015_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.925500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1252,HLS_SYN_LUT=1705}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_7FFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111111111111111111";
    constant ap_const_lv31_7FFFFFFF : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111111111111111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_28 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal input_000 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_000 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_000_ap_vld : STD_LOGIC;
    signal output_001 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_001_ap_vld : STD_LOGIC;
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal targeted_function_rm_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal input_000_read_reg_422 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_436 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_89 : BOOLEAN;
    signal retval_2_cast_fu_246_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal retval_2_cast_reg_440 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_98 : BOOLEAN;
    signal tmp_4_fu_254_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_444 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_107 : BOOLEAN;
    signal tmp_5_fu_308_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_451 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_fu_332_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_118 : BOOLEAN;
    signal grp_fu_321_ap_done : STD_LOGIC;
    signal tmp_3_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_338_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_467 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_135 : BOOLEAN;
    signal tmp_9_fu_392_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_474 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_fu_416_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_146 : BOOLEAN;
    signal grp_fu_405_ap_done : STD_LOGIC;
    signal tmp_11_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_000_promoted7_reg_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_163 : BOOLEAN;
    signal icmp_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_001_promoted5_reg_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal flag_0_reg_100 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_000_promoted_reg_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_001_promoted4_reg_127 : STD_LOGIC_VECTOR (31 downto 0);
    signal flag_0_1_phi_fu_143_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal flag_0_1_reg_139 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_001_promoted_reg_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal flag_1_2_phi_fu_167_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal flag_1_2_reg_164 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_176 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_186 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_reg_198 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_206 : BOOLEAN;
    signal tmp_7_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_208 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_233 : BOOLEAN;
    signal tmp_6_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_220_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_neg_fu_268_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_fu_274_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_13_fu_284_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_f_fu_294_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_17_fu_260_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t_fu_288_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_304_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_321_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg3_cast_fu_352_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_lshr4_fu_362_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_lshr4_cast_fu_368_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_f6_fu_378_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_18_fu_344_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t5_fu_372_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_388_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_405_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_321_ap_start : STD_LOGIC;
    signal grp_fu_321_ce : STD_LOGIC;
    signal grp_fu_405_ap_start : STD_LOGIC;
    signal grp_fu_405_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component targeted_function_srem_32ns_32ns_32_36_seq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component targeted_function_rm_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        input_000 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_000 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_000_ap_vld : IN STD_LOGIC;
        output_001 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_001_ap_vld : IN STD_LOGIC );
    end component;



begin
    targeted_function_rm_s_axi_U : component targeted_function_rm_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_RM_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_RM_DATA_WIDTH)
    port map (
        AWVALID => s_axi_rm_AWVALID,
        AWREADY => s_axi_rm_AWREADY,
        AWADDR => s_axi_rm_AWADDR,
        WVALID => s_axi_rm_WVALID,
        WREADY => s_axi_rm_WREADY,
        WDATA => s_axi_rm_WDATA,
        WSTRB => s_axi_rm_WSTRB,
        ARVALID => s_axi_rm_ARVALID,
        ARREADY => s_axi_rm_ARREADY,
        ARADDR => s_axi_rm_ARADDR,
        RVALID => s_axi_rm_RVALID,
        RREADY => s_axi_rm_RREADY,
        RDATA => s_axi_rm_RDATA,
        RRESP => s_axi_rm_RRESP,
        BVALID => s_axi_rm_BVALID,
        BREADY => s_axi_rm_BREADY,
        BRESP => s_axi_rm_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => targeted_function_rm_s_axi_U_ap_dummy_ce,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return,
        input_000 => input_000,
        output_000 => output_000,
        output_000_ap_vld => output_000_ap_vld,
        output_001 => output_001,
        output_001_ap_vld => output_001_ap_vld);

    targeted_function_srem_32ns_32ns_32_36_seq_U0 : component targeted_function_srem_32ns_32ns_32_36_seq
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_321_ap_start,
        done => grp_fu_321_ap_done,
        din0 => tmp_4_reg_444,
        din1 => i_reg_186,
        ce => grp_fu_321_ce,
        dout => grp_fu_321_p2);

    targeted_function_srem_32ns_32ns_32_36_seq_U1 : component targeted_function_srem_32ns_32ns_32_36_seq
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_405_ap_start,
        done => grp_fu_405_ap_done,
        din0 => tmp_8_reg_467,
        din1 => i_1_reg_208,
        ce => grp_fu_405_ce,
        dout => grp_fu_405_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- flag_0_1_reg_139 assign process. --
    flag_0_1_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                if ((ap_const_lv1_0 = tmp_1_fu_236_p2)) then 
                    flag_0_1_reg_139 <= flag_0_reg_100;
                elsif (not((ap_const_lv1_0 = tmp_1_fu_236_p2))) then 
                    flag_0_1_reg_139 <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;

    -- flag_0_reg_100 assign process. --
    flag_0_reg_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (ap_const_lv1_0 = icmp_fu_230_p2))) then 
                flag_0_reg_100 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
                flag_0_reg_100 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    -- flag_1_2_reg_164 assign process. --
    flag_1_2_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                if ((tmp_2_reg_436 = ap_const_lv1_0)) then 
                    flag_1_2_reg_164 <= flag_0_1_reg_139;
                elsif (not((tmp_2_reg_436 = ap_const_lv1_0))) then 
                    flag_1_2_reg_164 <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;

    -- i_1_reg_208 assign process. --
    i_1_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_logic_0 = grp_fu_405_ap_done)) and (ap_const_lv1_0 = tmp_11_fu_410_p2))) then 
                i_1_reg_208 <= i_3_fu_416_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
                i_1_reg_208 <= ap_const_lv32_2;
            end if; 
        end if;
    end process;

    -- i_reg_186 assign process. --
    i_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_logic_0 = grp_fu_321_ap_done)) and (tmp_3_fu_326_p2 = ap_const_lv1_0))) then 
                i_reg_186 <= i_2_fu_332_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                i_reg_186 <= ap_const_lv32_2;
            end if; 
        end if;
    end process;

    -- output_000_promoted7_reg_76 assign process. --
    output_000_promoted7_reg_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (ap_const_lv1_0 = icmp_fu_230_p2))) then 
                output_000_promoted7_reg_76 <= input_000;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
                output_000_promoted7_reg_76 <= ap_const_lv32_FFFFFFFF;
            end if; 
        end if;
    end process;

    -- output_000_promoted_reg_114 assign process. --
    output_000_promoted_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                if ((ap_const_lv1_0 = tmp_1_fu_236_p2)) then 
                    output_000_promoted_reg_114 <= output_000_promoted7_reg_76;
                elsif (not((ap_const_lv1_0 = tmp_1_fu_236_p2))) then 
                    output_000_promoted_reg_114 <= ap_const_lv32_FFFFFFFF;
                end if;
            end if; 
        end if;
    end process;

    -- output_001_promoted4_reg_127 assign process. --
    output_001_promoted4_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                if ((ap_const_lv1_0 = tmp_1_fu_236_p2)) then 
                    output_001_promoted4_reg_127 <= output_001_promoted5_reg_88;
                elsif (not((ap_const_lv1_0 = tmp_1_fu_236_p2))) then 
                    output_001_promoted4_reg_127 <= ap_const_lv32_3;
                end if;
            end if; 
        end if;
    end process;

    -- output_001_promoted5_reg_88 assign process. --
    output_001_promoted5_reg_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (ap_const_lv1_0 = icmp_fu_230_p2))) then 
                output_001_promoted5_reg_88 <= input_000;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
                output_001_promoted5_reg_88 <= ap_const_lv32_2;
            end if; 
        end if;
    end process;

    -- output_001_promoted_reg_152 assign process. --
    output_001_promoted_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                if ((tmp_2_reg_436 = ap_const_lv1_0)) then 
                    output_001_promoted_reg_152 <= output_001_promoted4_reg_127;
                elsif (not((tmp_2_reg_436 = ap_const_lv1_0))) then 
                    output_001_promoted_reg_152 <= ap_const_lv32_FFFFFFFF;
                end if;
            end if; 
        end if;
    end process;

    -- tmp_12_reg_176 assign process. --
    tmp_12_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_logic_0 = grp_fu_321_ap_done)) and not((tmp_3_fu_326_p2 = ap_const_lv1_0)))) then 
                tmp_12_reg_176 <= tmp_4_reg_444;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = flag_0_1_phi_fu_143_p4))) then 
                tmp_12_reg_176 <= output_000_promoted_reg_114;
            end if; 
        end if;
    end process;

    -- tmp_15_reg_198 assign process. --
    tmp_15_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_logic_0 = grp_fu_405_ap_done)) and not((ap_const_lv1_0 = tmp_11_fu_410_p2)))) then 
                tmp_15_reg_198 <= tmp_8_reg_467;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (((ap_const_lv1_0 = flag_1_2_reg_164) and not((ap_const_lv1_0 = flag_0_1_reg_139))) or ((ap_const_lv1_0 = flag_1_2_reg_164) and not((ap_const_lv1_0 = tmp_7_fu_316_p2)))))) then 
                tmp_15_reg_198 <= output_001_promoted_reg_152;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                input_000_read_reg_422 <= input_000;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                retval_2_cast_reg_440 <= retval_2_cast_fu_246_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                tmp_2_reg_436 <= tmp_2_fu_241_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                tmp_4_reg_444 <= tmp_4_fu_254_p2;
                tmp_5_reg_451 <= tmp_5_fu_308_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                tmp_8_reg_467 <= tmp_8_fu_338_p2;
                tmp_9_reg_474 <= tmp_9_fu_392_p3;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, grp_fu_321_ap_done, tmp_3_fu_326_p2, grp_fu_405_ap_done, tmp_11_fu_410_p2, icmp_fu_230_p2, flag_0_1_phi_fu_143_p4, flag_0_1_reg_139, flag_1_2_reg_164, tmp_7_fu_316_p2, tmp_6_fu_400_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if ((not((ap_start = ap_const_logic_0)) and (ap_const_lv1_0 = icmp_fu_230_p2))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                elsif ((not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = icmp_fu_230_p2)))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = flag_0_1_phi_fu_143_p4))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                if (((not((ap_const_lv1_0 = flag_0_1_reg_139)) and not((ap_const_lv1_0 = flag_1_2_reg_164))) or (not((ap_const_lv1_0 = tmp_7_fu_316_p2)) and not((ap_const_lv1_0 = flag_1_2_reg_164))))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                elsif ((((ap_const_lv1_0 = flag_1_2_reg_164) and not((ap_const_lv1_0 = flag_0_1_reg_139))) or ((ap_const_lv1_0 = flag_1_2_reg_164) and not((ap_const_lv1_0 = tmp_7_fu_316_p2))))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st7_fsm_6 => 
                if ((not((ap_const_logic_0 = grp_fu_321_ap_done)) and (tmp_3_fu_326_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                elsif ((not((ap_const_logic_0 = grp_fu_321_ap_done)) and not((tmp_3_fu_326_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                if ((not((ap_const_lv1_0 = tmp_6_fu_400_p2)) or not((ap_const_lv1_0 = flag_1_2_reg_164)))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                end if;
            when ap_ST_st10_fsm_9 => 
                if ((not((ap_const_logic_0 = grp_fu_405_ap_done)) and (ap_const_lv1_0 = tmp_11_fu_410_p2))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                elsif ((not((ap_const_logic_0 = grp_fu_405_ap_done)) and not((ap_const_lv1_0 = tmp_11_fu_410_p2)))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(flag_1_2_reg_164, ap_sig_cseq_ST_st9_fsm_8, tmp_6_fu_400_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (not((ap_const_lv1_0 = tmp_6_fu_400_p2)) or not((ap_const_lv1_0 = flag_1_2_reg_164))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(flag_1_2_reg_164, ap_sig_cseq_ST_st9_fsm_8, tmp_6_fu_400_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (not((ap_const_lv1_0 = tmp_6_fu_400_p2)) or not((ap_const_lv1_0 = flag_1_2_reg_164))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= retval_2_cast_reg_440;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_107 assign process. --
    ap_sig_bdd_107_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_107 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_118 assign process. --
    ap_sig_bdd_118_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_118 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_135 assign process. --
    ap_sig_bdd_135_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_135 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_146 assign process. --
    ap_sig_bdd_146_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_146 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_163 assign process. --
    ap_sig_bdd_163_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_163 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_206 assign process. --
    ap_sig_bdd_206_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_206 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_233 assign process. --
    ap_sig_bdd_233_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_233 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_28 assign process. --
    ap_sig_bdd_28_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_28 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_89 assign process. --
    ap_sig_bdd_89_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_89 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_98 assign process. --
    ap_sig_bdd_98_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_98 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_146)
    begin
        if (ap_sig_bdd_146) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_28)
    begin
        if (ap_sig_bdd_28) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_163)
    begin
        if (ap_sig_bdd_163) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_89)
    begin
        if (ap_sig_bdd_89) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_98)
    begin
        if (ap_sig_bdd_98) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_107)
    begin
        if (ap_sig_bdd_107) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_206)
    begin
        if (ap_sig_bdd_206) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_118)
    begin
        if (ap_sig_bdd_118) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_135)
    begin
        if (ap_sig_bdd_135) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_233)
    begin
        if (ap_sig_bdd_233) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    flag_0_1_phi_fu_143_p4 <= flag_0_1_reg_139;

    -- flag_1_2_phi_fu_167_p4 assign process. --
    flag_1_2_phi_fu_167_p4_assign_proc : process(tmp_2_reg_436, ap_sig_cseq_ST_st4_fsm_3, flag_0_1_reg_139)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
            if ((tmp_2_reg_436 = ap_const_lv1_0)) then 
                flag_1_2_phi_fu_167_p4 <= flag_0_1_reg_139;
            elsif (not((tmp_2_reg_436 = ap_const_lv1_0))) then 
                flag_1_2_phi_fu_167_p4 <= ap_const_lv1_1;
            else 
                flag_1_2_phi_fu_167_p4 <= "X";
            end if;
        else 
            flag_1_2_phi_fu_167_p4 <= "X";
        end if; 
    end process;


    -- grp_fu_321_ap_start assign process. --
    grp_fu_321_ap_start_assign_proc : process(flag_0_1_reg_139, ap_sig_cseq_ST_st6_fsm_5, tmp_7_fu_316_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = flag_0_1_reg_139) and (ap_const_lv1_0 = tmp_7_fu_316_p2))) then 
            grp_fu_321_ap_start <= ap_const_logic_1;
        else 
            grp_fu_321_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_321_ce <= ap_const_logic_1;

    -- grp_fu_405_ap_start assign process. --
    grp_fu_405_ap_start_assign_proc : process(flag_1_2_reg_164, ap_sig_cseq_ST_st9_fsm_8, tmp_6_fu_400_p2)
    begin
        if (((ap_const_lv1_0 = flag_1_2_reg_164) and (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (ap_const_lv1_0 = tmp_6_fu_400_p2))) then 
            grp_fu_405_ap_start <= ap_const_logic_1;
        else 
            grp_fu_405_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_405_ce <= ap_const_logic_1;
    i_2_fu_332_p2 <= std_logic_vector(unsigned(i_reg_186) + unsigned(ap_const_lv32_1));
    i_3_fu_416_p2 <= std_logic_vector(unsigned(i_1_reg_208) + unsigned(ap_const_lv32_1));
    icmp_fu_230_p2 <= "1" when (signed(tmp_fu_220_p4) < signed(ap_const_lv31_1)) else "0";

    -- output_000 assign process. --
    output_000_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, input_000, ap_sig_cseq_ST_st3_fsm_2, tmp_4_reg_444, ap_sig_cseq_ST_st2_fsm_1, tmp_1_fu_236_p2, flag_0_1_reg_139, ap_sig_cseq_ST_st6_fsm_5, tmp_7_fu_316_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = flag_0_1_reg_139) and not((ap_const_lv1_0 = tmp_7_fu_316_p2)))) then 
            output_000 <= tmp_4_reg_444;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_1_fu_236_p2))))) then 
            output_000 <= ap_const_lv32_FFFFFFFF;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
            output_000 <= input_000;
        else 
            output_000 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- output_000_ap_vld assign process. --
    output_000_ap_vld_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st2_fsm_1, tmp_1_fu_236_p2, flag_0_1_reg_139, ap_sig_cseq_ST_st6_fsm_5, tmp_7_fu_316_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_1_fu_236_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = flag_0_1_reg_139) and not((ap_const_lv1_0 = tmp_7_fu_316_p2))))) then 
            output_000_ap_vld <= ap_const_logic_1;
        else 
            output_000_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    -- output_001 assign process. --
    output_001_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, input_000, tmp_2_reg_436, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, tmp_8_reg_467, ap_sig_cseq_ST_st2_fsm_1, tmp_1_fu_236_p2, flag_1_2_reg_164, ap_sig_cseq_ST_st9_fsm_8, tmp_6_fu_400_p2)
    begin
        if (((ap_const_lv1_0 = flag_1_2_reg_164) and (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and not((ap_const_lv1_0 = tmp_6_fu_400_p2)))) then 
            output_001 <= tmp_8_reg_467;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((tmp_2_reg_436 = ap_const_lv1_0)))) then 
            output_001 <= ap_const_lv32_FFFFFFFF;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_1_fu_236_p2)))) then 
            output_001 <= ap_const_lv32_3;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            output_001 <= ap_const_lv32_2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
            output_001 <= input_000;
        else 
            output_001 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- output_001_ap_vld assign process. --
    output_001_ap_vld_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, tmp_2_reg_436, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st2_fsm_1, tmp_1_fu_236_p2, flag_1_2_reg_164, ap_sig_cseq_ST_st9_fsm_8, tmp_6_fu_400_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_1_fu_236_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((tmp_2_reg_436 = ap_const_lv1_0))) or ((ap_const_lv1_0 = flag_1_2_reg_164) and (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and not((ap_const_lv1_0 = tmp_6_fu_400_p2))))) then 
            output_001_ap_vld <= ap_const_logic_1;
        else 
            output_001_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_lshr4_cast_fu_368_p1 <= std_logic_vector(resize(unsigned(p_lshr4_fu_362_p2),32));
    p_lshr4_fu_362_p2 <= (p_neg3_cast_fu_352_p4 xor ap_const_lv31_7FFFFFFF);
    p_lshr_f6_fu_378_p4 <= tmp_8_fu_338_p2(31 downto 1);
    p_lshr_f_fu_294_p4 <= tmp_4_fu_254_p2(31 downto 1);
    p_lshr_fu_274_p4 <= p_neg_fu_268_p2(31 downto 1);
    p_neg3_cast_fu_352_p4 <= tmp_15_reg_198(31 downto 1);
    p_neg_fu_268_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) - unsigned(tmp_12_reg_176));
    p_neg_t5_fu_372_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_lshr4_cast_fu_368_p1));
    p_neg_t_fu_288_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_13_fu_284_p1));
    retval_2_cast_fu_246_p3 <= 
        ap_const_lv32_FFFFFFFF when (flag_1_2_phi_fu_167_p4(0) = '1') else 
        ap_const_lv32_0;
    targeted_function_rm_s_axi_U_ap_dummy_ce <= ap_const_logic_1;
    tmp_11_fu_410_p2 <= "1" when (grp_fu_405_p2 = ap_const_lv32_0) else "0";
    tmp_13_fu_284_p1 <= std_logic_vector(resize(unsigned(p_lshr_fu_274_p4),32));
    tmp_14_fu_304_p1 <= std_logic_vector(resize(unsigned(p_lshr_f_fu_294_p4),32));
    tmp_16_fu_388_p1 <= std_logic_vector(resize(unsigned(p_lshr_f6_fu_378_p4),32));
    tmp_17_fu_260_p3 <= tmp_4_fu_254_p2(31 downto 31);
    tmp_18_fu_344_p3 <= tmp_8_fu_338_p2(31 downto 31);
    tmp_1_fu_236_p2 <= "1" when (input_000_read_reg_422 = ap_const_lv32_2) else "0";
    tmp_2_fu_241_p2 <= "1" when (input_000_read_reg_422 = ap_const_lv32_7FFFFFFF) else "0";
    tmp_3_fu_326_p2 <= "1" when (grp_fu_321_p2 = ap_const_lv32_0) else "0";
    tmp_4_fu_254_p2 <= std_logic_vector(unsigned(tmp_12_reg_176) + unsigned(ap_const_lv32_FFFFFFFF));
    tmp_5_fu_308_p3 <= 
        p_neg_t_fu_288_p2 when (tmp_17_fu_260_p3(0) = '1') else 
        tmp_14_fu_304_p1;
    tmp_6_fu_400_p2 <= "1" when (signed(i_1_reg_208) > signed(tmp_9_reg_474)) else "0";
    tmp_7_fu_316_p2 <= "1" when (signed(i_reg_186) > signed(tmp_5_reg_451)) else "0";
    tmp_8_fu_338_p2 <= std_logic_vector(unsigned(tmp_15_reg_198) + unsigned(ap_const_lv32_1));
    tmp_9_fu_392_p3 <= 
        p_neg_t5_fu_372_p2 when (tmp_18_fu_344_p3(0) = '1') else 
        tmp_16_fu_388_p1;
    tmp_fu_220_p4 <= input_000(31 downto 1);
end behav;
