// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _targeted_function_HH_
#define _targeted_function_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "targeted_function_mul_32s_32s_32_6.h"
#include "targeted_function_rm_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_RM_ADDR_WIDTH = 6,
         unsigned int C_S_AXI_RM_DATA_WIDTH = 32>
struct targeted_function : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > s_axi_rm_AWVALID;
    sc_out< sc_logic > s_axi_rm_AWREADY;
    sc_in< sc_uint<C_S_AXI_RM_ADDR_WIDTH> > s_axi_rm_AWADDR;
    sc_in< sc_logic > s_axi_rm_WVALID;
    sc_out< sc_logic > s_axi_rm_WREADY;
    sc_in< sc_uint<C_S_AXI_RM_DATA_WIDTH> > s_axi_rm_WDATA;
    sc_in< sc_uint<C_S_AXI_RM_DATA_WIDTH/8> > s_axi_rm_WSTRB;
    sc_in< sc_logic > s_axi_rm_ARVALID;
    sc_out< sc_logic > s_axi_rm_ARREADY;
    sc_in< sc_uint<C_S_AXI_RM_ADDR_WIDTH> > s_axi_rm_ARADDR;
    sc_out< sc_logic > s_axi_rm_RVALID;
    sc_in< sc_logic > s_axi_rm_RREADY;
    sc_out< sc_uint<C_S_AXI_RM_DATA_WIDTH> > s_axi_rm_RDATA;
    sc_out< sc_lv<2> > s_axi_rm_RRESP;
    sc_out< sc_logic > s_axi_rm_BVALID;
    sc_in< sc_logic > s_axi_rm_BREADY;
    sc_out< sc_lv<2> > s_axi_rm_BRESP;
    sc_out< sc_logic > interrupt;


    // Module declarations
    targeted_function(sc_module_name name);
    SC_HAS_PROCESS(targeted_function);

    ~targeted_function();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    targeted_function_rm_s_axi<C_S_AXI_RM_ADDR_WIDTH,C_S_AXI_RM_DATA_WIDTH>* targeted_function_rm_s_axi_U;
    targeted_function_mul_32s_32s_32_6<1,6,32,32,32>* targeted_function_mul_32s_32s_32_6_U0;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_24;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > input_000;
    sc_signal< sc_lv<32> > input_001;
    sc_signal< sc_lv<32> > output_000;
    sc_signal< sc_logic > output_000_ap_vld;
    sc_signal< sc_lv<32> > ap_return;
    sc_signal< sc_logic > targeted_function_rm_s_axi_U_ap_dummy_ce;
    sc_signal< sc_lv<32> > grp_fu_45_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st6_fsm_5;
    sc_signal< bool > ap_sig_bdd_85;
    sc_signal< sc_logic > grp_fu_45_ce;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_st1_fsm_0;
    static const sc_lv<6> ap_ST_st2_fsm_1;
    static const sc_lv<6> ap_ST_st3_fsm_2;
    static const sc_lv<6> ap_ST_st4_fsm_3;
    static const sc_lv<6> ap_ST_st5_fsm_4;
    static const sc_lv<6> ap_ST_st6_fsm_5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_5;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_ap_rst_n_inv();
    void thread_ap_sig_bdd_24();
    void thread_ap_sig_bdd_85();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st6_fsm_5();
    void thread_grp_fu_45_ce();
    void thread_output_000();
    void thread_output_000_ap_vld();
    void thread_targeted_function_rm_s_axi_U_ap_dummy_ce();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
