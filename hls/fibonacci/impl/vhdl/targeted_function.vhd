-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity targeted_function is
generic (
    C_S_AXI_RM_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_RM_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_rm_AWVALID : IN STD_LOGIC;
    s_axi_rm_AWREADY : OUT STD_LOGIC;
    s_axi_rm_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_RM_ADDR_WIDTH-1 downto 0);
    s_axi_rm_WVALID : IN STD_LOGIC;
    s_axi_rm_WREADY : OUT STD_LOGIC;
    s_axi_rm_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_RM_DATA_WIDTH-1 downto 0);
    s_axi_rm_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_RM_DATA_WIDTH/8-1 downto 0);
    s_axi_rm_ARVALID : IN STD_LOGIC;
    s_axi_rm_ARREADY : OUT STD_LOGIC;
    s_axi_rm_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_RM_ADDR_WIDTH-1 downto 0);
    s_axi_rm_RVALID : OUT STD_LOGIC;
    s_axi_rm_RREADY : IN STD_LOGIC;
    s_axi_rm_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_RM_DATA_WIDTH-1 downto 0);
    s_axi_rm_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_rm_BVALID : OUT STD_LOGIC;
    s_axi_rm_BREADY : IN STD_LOGIC;
    s_axi_rm_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of targeted_function is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "targeted_function,hls_ip_2015_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.459000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=251,HLS_SYN_LUT=410}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_20 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal input_000 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_000 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_000_ap_vld : STD_LOGIC;
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal targeted_function_rm_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal input_000_read_reg_184 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond_fu_132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_189 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_193 : STD_LOGIC_VECTOR (0 downto 0);
    signal second_fu_163_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_86 : BOOLEAN;
    signal exitcond_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_170_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_67 : STD_LOGIC_VECTOR (5 downto 0);
    signal first_reg_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal first_1_reg_89 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0_phi_fu_107_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0_reg_102 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_118_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_138_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_cast_fu_154_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component targeted_function_rm_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        input_000 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_000 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_000_ap_vld : IN STD_LOGIC );
    end component;



begin
    targeted_function_rm_s_axi_U : component targeted_function_rm_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_RM_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_RM_DATA_WIDTH)
    port map (
        AWVALID => s_axi_rm_AWVALID,
        AWREADY => s_axi_rm_AWREADY,
        AWADDR => s_axi_rm_AWADDR,
        WVALID => s_axi_rm_WVALID,
        WREADY => s_axi_rm_WREADY,
        WDATA => s_axi_rm_WDATA,
        WSTRB => s_axi_rm_WSTRB,
        ARVALID => s_axi_rm_ARVALID,
        ARREADY => s_axi_rm_ARREADY,
        ARADDR => s_axi_rm_ARADDR,
        RVALID => s_axi_rm_RVALID,
        RREADY => s_axi_rm_RREADY,
        RDATA => s_axi_rm_RDATA,
        RRESP => s_axi_rm_RRESP,
        BVALID => s_axi_rm_BVALID,
        BREADY => s_axi_rm_BREADY,
        BRESP => s_axi_rm_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => targeted_function_rm_s_axi_U_ap_dummy_ce,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return,
        input_000 => input_000,
        output_000 => output_000,
        output_000_ap_vld => output_000_ap_vld);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- first_1_reg_89 assign process. --
    first_1_reg_89_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (or_cond_fu_132_p2 = ap_const_lv1_0) and (icmp_fu_148_p2 = ap_const_lv1_0))) then 
                first_1_reg_89 <= ap_const_lv32_1;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (or_cond_reg_189 = ap_const_lv1_0) and (icmp_reg_193 = ap_const_lv1_0) and (ap_const_lv1_0 = exitcond_fu_158_p2))) then 
                first_1_reg_89 <= second_fu_163_p2;
            end if; 
        end if;
    end process;

    -- first_reg_78 assign process. --
    first_reg_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (or_cond_fu_132_p2 = ap_const_lv1_0) and (icmp_fu_148_p2 = ap_const_lv1_0))) then 
                first_reg_78 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (or_cond_reg_189 = ap_const_lv1_0) and (icmp_reg_193 = ap_const_lv1_0) and (ap_const_lv1_0 = exitcond_fu_158_p2))) then 
                first_reg_78 <= first_1_reg_89;
            end if; 
        end if;
    end process;

    -- i_reg_67 assign process. --
    i_reg_67_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (or_cond_fu_132_p2 = ap_const_lv1_0) and (icmp_fu_148_p2 = ap_const_lv1_0))) then 
                i_reg_67 <= ap_const_lv6_1;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (or_cond_reg_189 = ap_const_lv1_0) and (icmp_reg_193 = ap_const_lv1_0) and (ap_const_lv1_0 = exitcond_fu_158_p2))) then 
                i_reg_67 <= i_1_fu_170_p2;
            end if; 
        end if;
    end process;

    -- p_0_reg_102 assign process. --
    p_0_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (or_cond_fu_132_p2 = ap_const_lv1_0) and not((icmp_fu_148_p2 = ap_const_lv1_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (or_cond_reg_189 = ap_const_lv1_0) and (icmp_reg_193 = ap_const_lv1_0) and not((ap_const_lv1_0 = exitcond_fu_158_p2))))) then 
                p_0_reg_102 <= ap_const_lv1_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((or_cond_fu_132_p2 = ap_const_lv1_0)))) then 
                p_0_reg_102 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (or_cond_fu_132_p2 = ap_const_lv1_0))) then
                icmp_reg_193 <= icmp_fu_148_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                input_000_read_reg_184 <= input_000;
                or_cond_reg_189 <= or_cond_fu_132_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, or_cond_reg_189, icmp_reg_193, exitcond_fu_158_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((not((ap_const_lv1_0 = exitcond_fu_158_p2)) or not((or_cond_reg_189 = ap_const_lv1_0)) or not((icmp_reg_193 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(or_cond_reg_189, icmp_reg_193, ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_158_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (not((ap_const_lv1_0 = exitcond_fu_158_p2)) or not((or_cond_reg_189 = ap_const_lv1_0)) or not((icmp_reg_193 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(or_cond_reg_189, icmp_reg_193, ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_158_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (not((ap_const_lv1_0 = exitcond_fu_158_p2)) or not((or_cond_reg_189 = ap_const_lv1_0)) or not((icmp_reg_193 = ap_const_lv1_0))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        ap_const_lv32_FFFFFFFF when (p_0_phi_fu_107_p6(0) = '1') else 
        ap_const_lv32_0;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_20 assign process. --
    ap_sig_bdd_20_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_20 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_86 assign process. --
    ap_sig_bdd_86_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_86 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_20)
    begin
        if (ap_sig_bdd_20) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_86)
    begin
        if (ap_sig_bdd_86) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_158_p2 <= "1" when (i_cast_fu_154_p1 = input_000_read_reg_184) else "0";
    i_1_fu_170_p2 <= std_logic_vector(unsigned(i_reg_67) + unsigned(ap_const_lv6_1));
    i_cast_fu_154_p1 <= std_logic_vector(resize(unsigned(i_reg_67),32));
    icmp_fu_148_p2 <= "1" when (signed(tmp_2_fu_138_p4) < signed(ap_const_lv31_1)) else "0";
    or_cond_fu_132_p2 <= (tmp_fu_118_p3 or tmp_1_fu_126_p2);

    -- output_000 assign process. --
    output_000_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, input_000, or_cond_fu_132_p2, or_cond_reg_189, icmp_fu_148_p2, icmp_reg_193, second_fu_163_p2, ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_158_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (or_cond_reg_189 = ap_const_lv1_0) and (icmp_reg_193 = ap_const_lv1_0) and (ap_const_lv1_0 = exitcond_fu_158_p2))) then 
            output_000 <= second_fu_163_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((or_cond_fu_132_p2 = ap_const_lv1_0)))) then 
            output_000 <= ap_const_lv32_FFFFFFFF;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (or_cond_fu_132_p2 = ap_const_lv1_0) and not((icmp_fu_148_p2 = ap_const_lv1_0)))) then 
            output_000 <= input_000;
        else 
            output_000 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- output_000_ap_vld assign process. --
    output_000_ap_vld_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, or_cond_fu_132_p2, or_cond_reg_189, icmp_fu_148_p2, icmp_reg_193, ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_158_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (or_cond_reg_189 = ap_const_lv1_0) and (icmp_reg_193 = ap_const_lv1_0) and (ap_const_lv1_0 = exitcond_fu_158_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((or_cond_fu_132_p2 = ap_const_lv1_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (or_cond_fu_132_p2 = ap_const_lv1_0) and not((icmp_fu_148_p2 = ap_const_lv1_0))))) then 
            output_000_ap_vld <= ap_const_logic_1;
        else 
            output_000_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    -- p_0_phi_fu_107_p6 assign process. --
    p_0_phi_fu_107_p6_assign_proc : process(or_cond_reg_189, icmp_reg_193, ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_158_p2, p_0_reg_102)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (or_cond_reg_189 = ap_const_lv1_0) and (icmp_reg_193 = ap_const_lv1_0) and not((ap_const_lv1_0 = exitcond_fu_158_p2)))) then 
            p_0_phi_fu_107_p6 <= ap_const_lv1_0;
        else 
            p_0_phi_fu_107_p6 <= p_0_reg_102;
        end if; 
    end process;

    second_fu_163_p2 <= std_logic_vector(unsigned(first_reg_78) + unsigned(first_1_reg_89));
    targeted_function_rm_s_axi_U_ap_dummy_ce <= ap_const_logic_1;
    tmp_1_fu_126_p2 <= "1" when (signed(input_000) > signed(ap_const_lv32_2E)) else "0";
    tmp_2_fu_138_p4 <= input_000(31 downto 1);
    tmp_fu_118_p3 <= input_000(31 downto 31);
end behav;
