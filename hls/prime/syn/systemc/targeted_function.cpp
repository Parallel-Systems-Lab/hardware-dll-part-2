// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "targeted_function.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic targeted_function::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic targeted_function::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> targeted_function::ap_ST_st1_fsm_0 = "1";
const sc_lv<5> targeted_function::ap_ST_st2_fsm_1 = "10";
const sc_lv<5> targeted_function::ap_ST_st3_fsm_2 = "100";
const sc_lv<5> targeted_function::ap_ST_st4_fsm_3 = "1000";
const sc_lv<5> targeted_function::ap_ST_st5_fsm_4 = "10000";
const sc_lv<32> targeted_function::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> targeted_function::ap_const_lv1_1 = "1";
const int targeted_function::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> targeted_function::ap_const_lv32_1 = "1";
const sc_lv<1> targeted_function::ap_const_lv1_0 = "0";
const sc_lv<32> targeted_function::ap_const_lv32_2 = "10";
const sc_lv<32> targeted_function::ap_const_lv32_3 = "11";
const sc_lv<32> targeted_function::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const sc_lv<32> targeted_function::ap_const_lv32_643A95D = "110010000111010100101011101";
const sc_lv<32> targeted_function::ap_const_lv32_4 = "100";

targeted_function::targeted_function(sc_module_name name) : sc_module(name), mVcdFile(0) {
    targeted_function_rm_s_axi_U = new targeted_function_rm_s_axi<C_S_AXI_RM_ADDR_WIDTH,C_S_AXI_RM_DATA_WIDTH>("targeted_function_rm_s_axi_U");
    targeted_function_rm_s_axi_U->AWVALID(s_axi_rm_AWVALID);
    targeted_function_rm_s_axi_U->AWREADY(s_axi_rm_AWREADY);
    targeted_function_rm_s_axi_U->AWADDR(s_axi_rm_AWADDR);
    targeted_function_rm_s_axi_U->WVALID(s_axi_rm_WVALID);
    targeted_function_rm_s_axi_U->WREADY(s_axi_rm_WREADY);
    targeted_function_rm_s_axi_U->WDATA(s_axi_rm_WDATA);
    targeted_function_rm_s_axi_U->WSTRB(s_axi_rm_WSTRB);
    targeted_function_rm_s_axi_U->ARVALID(s_axi_rm_ARVALID);
    targeted_function_rm_s_axi_U->ARREADY(s_axi_rm_ARREADY);
    targeted_function_rm_s_axi_U->ARADDR(s_axi_rm_ARADDR);
    targeted_function_rm_s_axi_U->RVALID(s_axi_rm_RVALID);
    targeted_function_rm_s_axi_U->RREADY(s_axi_rm_RREADY);
    targeted_function_rm_s_axi_U->RDATA(s_axi_rm_RDATA);
    targeted_function_rm_s_axi_U->RRESP(s_axi_rm_RRESP);
    targeted_function_rm_s_axi_U->BVALID(s_axi_rm_BVALID);
    targeted_function_rm_s_axi_U->BREADY(s_axi_rm_BREADY);
    targeted_function_rm_s_axi_U->BRESP(s_axi_rm_BRESP);
    targeted_function_rm_s_axi_U->ACLK(ap_clk);
    targeted_function_rm_s_axi_U->ARESET(ap_rst_n_inv);
    targeted_function_rm_s_axi_U->ACLK_EN(targeted_function_rm_s_axi_U_ap_dummy_ce);
    targeted_function_rm_s_axi_U->ap_start(ap_start);
    targeted_function_rm_s_axi_U->interrupt(interrupt);
    targeted_function_rm_s_axi_U->ap_ready(ap_ready);
    targeted_function_rm_s_axi_U->ap_done(ap_done);
    targeted_function_rm_s_axi_U->ap_idle(ap_idle);
    targeted_function_rm_s_axi_U->ap_return(ap_return);
    targeted_function_rm_s_axi_U->input_000(input_000);
    targeted_function_rm_s_axi_U->output_000(output_000);
    targeted_function_rm_s_axi_U->output_000_ap_vld(output_000_ap_vld);
    targeted_function_srem_32ns_32ns_32_36_seq_U0 = new targeted_function_srem_32ns_32ns_32_36_seq<1,36,32,32,32>("targeted_function_srem_32ns_32ns_32_36_seq_U0");
    targeted_function_srem_32ns_32ns_32_36_seq_U0->clk(ap_clk);
    targeted_function_srem_32ns_32ns_32_36_seq_U0->reset(ap_rst_n_inv);
    targeted_function_srem_32ns_32ns_32_36_seq_U0->start(grp_fu_137_ap_start);
    targeted_function_srem_32ns_32ns_32_36_seq_U0->done(grp_fu_137_ap_done);
    targeted_function_srem_32ns_32ns_32_36_seq_U0->din0(ctr_reg_57);
    targeted_function_srem_32ns_32ns_32_36_seq_U0->din1(j_reg_70);
    targeted_function_srem_32ns_32ns_32_36_seq_U0->ce(grp_fu_137_ce);
    targeted_function_srem_32ns_32ns_32_36_seq_U0->dout(grp_fu_137_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_ap_return);
    sensitive << ( p_0_reg_82 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_bdd_106);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_187);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_82);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_97);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_23 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_bdd_82 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_bdd_97 );

    SC_METHOD(thread_ap_sig_cseq_ST_st4_fsm_3);
    sensitive << ( ap_sig_bdd_106 );

    SC_METHOD(thread_ap_sig_cseq_ST_st5_fsm_4);
    sensitive << ( ap_sig_bdd_187 );

    SC_METHOD(thread_ctr_1_fu_171_p2);
    sensitive << ( ctr_reg_57 );

    SC_METHOD(thread_grp_fu_137_ap_start);
    sensitive << ( tmp_4_fu_132_p2 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_grp_fu_137_ce);

    SC_METHOD(thread_i_1_fu_161_p2);
    sensitive << ( i_load_reg_200 );

    SC_METHOD(thread_j_1_fu_149_p2);
    sensitive << ( j_reg_70 );

    SC_METHOD(thread_or_cond_fu_107_p2);
    sensitive << ( tmp_fu_95_p2 );
    sensitive << ( tmp_1_fu_101_p2 );

    SC_METHOD(thread_output_000);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( tmp_4_reg_213 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( grp_fu_137_ap_done );
    sensitive << ( tmp_6_fu_143_p2 );
    sensitive << ( ctr_reg_57 );
    sensitive << ( or_cond_fu_107_p2 );
    sensitive << ( tmp_7_fu_155_p2 );

    SC_METHOD(thread_output_000_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( tmp_4_reg_213 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( grp_fu_137_ap_done );
    sensitive << ( tmp_6_fu_143_p2 );
    sensitive << ( or_cond_fu_107_p2 );
    sensitive << ( tmp_7_fu_155_p2 );

    SC_METHOD(thread_targeted_function_rm_s_axi_U_ap_dummy_ce);

    SC_METHOD(thread_tmp_1_fu_101_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( input_000 );

    SC_METHOD(thread_tmp_2_fu_121_p2);
    sensitive << ( input_000_read_reg_185 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( i_fu_38 );

    SC_METHOD(thread_tmp_3_fu_126_p2);
    sensitive << ( ctr_reg_57 );

    SC_METHOD(thread_tmp_4_fu_132_p2);
    sensitive << ( tmp_3_reg_208 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( j_reg_70 );

    SC_METHOD(thread_tmp_6_fu_143_p2);
    sensitive << ( tmp_4_reg_213 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( grp_fu_137_ap_done );
    sensitive << ( grp_fu_137_p2 );

    SC_METHOD(thread_tmp_7_fu_155_p2);
    sensitive << ( tmp_4_reg_213 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( grp_fu_137_ap_done );
    sensitive << ( tmp_6_fu_143_p2 );
    sensitive << ( ctr_reg_57 );
    sensitive << ( j_reg_70 );

    SC_METHOD(thread_tmp_fu_95_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( input_000 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_2_fu_121_p2 );
    sensitive << ( tmp_4_reg_213 );
    sensitive << ( grp_fu_137_ap_done );
    sensitive << ( tmp_6_fu_143_p2 );
    sensitive << ( or_cond_fu_107_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "targeted_function_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, s_axi_rm_AWVALID, "(port)s_axi_rm_AWVALID");
    sc_trace(mVcdFile, s_axi_rm_AWREADY, "(port)s_axi_rm_AWREADY");
    sc_trace(mVcdFile, s_axi_rm_AWADDR, "(port)s_axi_rm_AWADDR");
    sc_trace(mVcdFile, s_axi_rm_WVALID, "(port)s_axi_rm_WVALID");
    sc_trace(mVcdFile, s_axi_rm_WREADY, "(port)s_axi_rm_WREADY");
    sc_trace(mVcdFile, s_axi_rm_WDATA, "(port)s_axi_rm_WDATA");
    sc_trace(mVcdFile, s_axi_rm_WSTRB, "(port)s_axi_rm_WSTRB");
    sc_trace(mVcdFile, s_axi_rm_ARVALID, "(port)s_axi_rm_ARVALID");
    sc_trace(mVcdFile, s_axi_rm_ARREADY, "(port)s_axi_rm_ARREADY");
    sc_trace(mVcdFile, s_axi_rm_ARADDR, "(port)s_axi_rm_ARADDR");
    sc_trace(mVcdFile, s_axi_rm_RVALID, "(port)s_axi_rm_RVALID");
    sc_trace(mVcdFile, s_axi_rm_RREADY, "(port)s_axi_rm_RREADY");
    sc_trace(mVcdFile, s_axi_rm_RDATA, "(port)s_axi_rm_RDATA");
    sc_trace(mVcdFile, s_axi_rm_RRESP, "(port)s_axi_rm_RRESP");
    sc_trace(mVcdFile, s_axi_rm_BVALID, "(port)s_axi_rm_BVALID");
    sc_trace(mVcdFile, s_axi_rm_BREADY, "(port)s_axi_rm_BREADY");
    sc_trace(mVcdFile, s_axi_rm_BRESP, "(port)s_axi_rm_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_23, "ap_sig_bdd_23");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, input_000, "input_000");
    sc_trace(mVcdFile, output_000, "output_000");
    sc_trace(mVcdFile, output_000_ap_vld, "output_000_ap_vld");
    sc_trace(mVcdFile, ap_return, "ap_return");
    sc_trace(mVcdFile, targeted_function_rm_s_axi_U_ap_dummy_ce, "targeted_function_rm_s_axi_U_ap_dummy_ce");
    sc_trace(mVcdFile, input_000_read_reg_185, "input_000_read_reg_185");
    sc_trace(mVcdFile, i_load_reg_200, "i_load_reg_200");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_bdd_82, "ap_sig_bdd_82");
    sc_trace(mVcdFile, tmp_3_fu_126_p2, "tmp_3_fu_126_p2");
    sc_trace(mVcdFile, tmp_3_reg_208, "tmp_3_reg_208");
    sc_trace(mVcdFile, tmp_2_fu_121_p2, "tmp_2_fu_121_p2");
    sc_trace(mVcdFile, tmp_4_fu_132_p2, "tmp_4_fu_132_p2");
    sc_trace(mVcdFile, tmp_4_reg_213, "tmp_4_reg_213");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_bdd_97, "ap_sig_bdd_97");
    sc_trace(mVcdFile, j_1_fu_149_p2, "j_1_fu_149_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st4_fsm_3, "ap_sig_cseq_ST_st4_fsm_3");
    sc_trace(mVcdFile, ap_sig_bdd_106, "ap_sig_bdd_106");
    sc_trace(mVcdFile, grp_fu_137_ap_done, "grp_fu_137_ap_done");
    sc_trace(mVcdFile, tmp_6_fu_143_p2, "tmp_6_fu_143_p2");
    sc_trace(mVcdFile, ctr_1_fu_171_p2, "ctr_1_fu_171_p2");
    sc_trace(mVcdFile, ctr_reg_57, "ctr_reg_57");
    sc_trace(mVcdFile, or_cond_fu_107_p2, "or_cond_fu_107_p2");
    sc_trace(mVcdFile, j_reg_70, "j_reg_70");
    sc_trace(mVcdFile, p_0_reg_82, "p_0_reg_82");
    sc_trace(mVcdFile, i_fu_38, "i_fu_38");
    sc_trace(mVcdFile, i_1_fu_161_p2, "i_1_fu_161_p2");
    sc_trace(mVcdFile, tmp_7_fu_155_p2, "tmp_7_fu_155_p2");
    sc_trace(mVcdFile, tmp_fu_95_p2, "tmp_fu_95_p2");
    sc_trace(mVcdFile, tmp_1_fu_101_p2, "tmp_1_fu_101_p2");
    sc_trace(mVcdFile, grp_fu_137_p2, "grp_fu_137_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st5_fsm_4, "ap_sig_cseq_ST_st5_fsm_4");
    sc_trace(mVcdFile, ap_sig_bdd_187, "ap_sig_bdd_187");
    sc_trace(mVcdFile, grp_fu_137_ap_start, "grp_fu_137_ap_start");
    sc_trace(mVcdFile, grp_fu_137_ce, "grp_fu_137_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("targeted_function.hdltvin.dat");
    mHdltvoutHandle.open("targeted_function.hdltvout.dat");
}

targeted_function::~targeted_function() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete targeted_function_rm_s_axi_U;
    delete targeted_function_srem_32ns_32ns_32_36_seq_U0;
}

void targeted_function::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, grp_fu_137_ap_done.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_4_reg_213.read())) && 
         (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_4_reg_213.read()) || 
          !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_fu_143_p2.read())))) {
        ctr_reg_57 = ctr_1_fu_171_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_fu_107_p2.read()))) {
        ctr_reg_57 = ap_const_lv32_3;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, grp_fu_137_ap_done.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_4_reg_213.read())) && 
         ((!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_4_reg_213.read()) && 
           !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_155_p2.read())) || 
          (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_fu_143_p2.read()) && 
           !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_155_p2.read()))))) {
        i_fu_38 = i_1_fu_161_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_fu_107_p2.read()))) {
        i_fu_38 = ap_const_lv32_2;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         esl_seteq<1,1,1>(tmp_2_fu_121_p2.read(), ap_const_lv1_0))) {
        j_reg_70 = ap_const_lv32_2;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_4_reg_213.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, grp_fu_137_ap_done.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_4_reg_213.read())) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_fu_143_p2.read()))) {
        j_reg_70 = j_1_fu_149_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !esl_seteq<1,1,1>(tmp_2_fu_121_p2.read(), ap_const_lv1_0))) {
        p_0_reg_82 = ap_const_lv1_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_fu_107_p2.read()))) {
        p_0_reg_82 = ap_const_lv1_1;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        i_load_reg_200 = i_fu_38.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        input_000_read_reg_185 = input_000.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && esl_seteq<1,1,1>(tmp_2_fu_121_p2.read(), ap_const_lv1_0))) {
        tmp_3_reg_208 = tmp_3_fu_126_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        tmp_4_reg_213 = tmp_4_fu_132_p2.read();
    }
}

void targeted_function::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void targeted_function::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void targeted_function::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void targeted_function::thread_ap_return() {
    ap_return = (!p_0_reg_82.read()[0].is_01())? sc_lv<32>(): ((p_0_reg_82.read()[0].to_bool())? ap_const_lv32_FFFFFFFF: ap_const_lv32_0);
}

void targeted_function::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void targeted_function::thread_ap_sig_bdd_106() {
    ap_sig_bdd_106 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void targeted_function::thread_ap_sig_bdd_187() {
    ap_sig_bdd_187 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(4, 4));
}

void targeted_function::thread_ap_sig_bdd_23() {
    ap_sig_bdd_23 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void targeted_function::thread_ap_sig_bdd_82() {
    ap_sig_bdd_82 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void targeted_function::thread_ap_sig_bdd_97() {
    ap_sig_bdd_97 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void targeted_function::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_23.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void targeted_function::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_bdd_82.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void targeted_function::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_bdd_97.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void targeted_function::thread_ap_sig_cseq_ST_st4_fsm_3() {
    if (ap_sig_bdd_106.read()) {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    }
}

void targeted_function::thread_ap_sig_cseq_ST_st5_fsm_4() {
    if (ap_sig_bdd_187.read()) {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    }
}

void targeted_function::thread_ctr_1_fu_171_p2() {
    ctr_1_fu_171_p2 = (!ctr_reg_57.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(ctr_reg_57.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void targeted_function::thread_grp_fu_137_ap_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_4_fu_132_p2.read()))) {
        grp_fu_137_ap_start = ap_const_logic_1;
    } else {
        grp_fu_137_ap_start = ap_const_logic_0;
    }
}

void targeted_function::thread_grp_fu_137_ce() {
    grp_fu_137_ce = ap_const_logic_1;
}

void targeted_function::thread_i_1_fu_161_p2() {
    i_1_fu_161_p2 = (!i_load_reg_200.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(i_load_reg_200.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void targeted_function::thread_j_1_fu_149_p2() {
    j_1_fu_149_p2 = (!j_reg_70.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(j_reg_70.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void targeted_function::thread_or_cond_fu_107_p2() {
    or_cond_fu_107_p2 = (tmp_fu_95_p2.read() | tmp_1_fu_101_p2.read());
}

void targeted_function::thread_output_000() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, grp_fu_137_ap_done.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_4_reg_213.read())) && 
         ((!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_4_reg_213.read()) && 
           !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_155_p2.read())) || 
          (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_fu_143_p2.read()) && 
           !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_155_p2.read()))))) {
        output_000 = ctr_reg_57.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_fu_107_p2.read()))) {
        output_000 = ap_const_lv32_FFFFFFFF;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_fu_107_p2.read()))) {
        output_000 = ap_const_lv32_2;
    } else {
        output_000 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void targeted_function::thread_output_000_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_fu_107_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_fu_107_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, grp_fu_137_ap_done.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_4_reg_213.read())) && 
          ((!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_4_reg_213.read()) && 
            !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_155_p2.read())) || 
           (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_fu_143_p2.read()) && 
            !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_155_p2.read())))))) {
        output_000_ap_vld = ap_const_logic_1;
    } else {
        output_000_ap_vld = ap_const_logic_0;
    }
}

void targeted_function::thread_targeted_function_rm_s_axi_U_ap_dummy_ce() {
    targeted_function_rm_s_axi_U_ap_dummy_ce = ap_const_logic_1;
}

void targeted_function::thread_tmp_1_fu_101_p2() {
    tmp_1_fu_101_p2 = (!input_000.read().is_01() || !ap_const_lv32_643A95D.is_01())? sc_lv<1>(): (sc_bigint<32>(input_000.read()) > sc_bigint<32>(ap_const_lv32_643A95D));
}

void targeted_function::thread_tmp_2_fu_121_p2() {
    tmp_2_fu_121_p2 = (!i_fu_38.read().is_01() || !input_000_read_reg_185.read().is_01())? sc_lv<1>(): (sc_bigint<32>(i_fu_38.read()) > sc_bigint<32>(input_000_read_reg_185.read()));
}

void targeted_function::thread_tmp_3_fu_126_p2() {
    tmp_3_fu_126_p2 = (!ctr_reg_57.read().is_01() || !ap_const_lv32_FFFFFFFF.is_01())? sc_lv<32>(): (sc_biguint<32>(ctr_reg_57.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFFF));
}

void targeted_function::thread_tmp_4_fu_132_p2() {
    tmp_4_fu_132_p2 = (!j_reg_70.read().is_01() || !tmp_3_reg_208.read().is_01())? sc_lv<1>(): (sc_bigint<32>(j_reg_70.read()) > sc_bigint<32>(tmp_3_reg_208.read()));
}

void targeted_function::thread_tmp_6_fu_143_p2() {
    tmp_6_fu_143_p2 = (!grp_fu_137_p2.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(grp_fu_137_p2.read() == ap_const_lv32_0);
}

void targeted_function::thread_tmp_7_fu_155_p2() {
    tmp_7_fu_155_p2 = (!ctr_reg_57.read().is_01() || !j_reg_70.read().is_01())? sc_lv<1>(): sc_lv<1>(ctr_reg_57.read() == j_reg_70.read());
}

void targeted_function::thread_tmp_fu_95_p2() {
    tmp_fu_95_p2 = (!input_000.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<1>(): (sc_bigint<32>(input_000.read()) < sc_bigint<32>(ap_const_lv32_1));
}

void targeted_function::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && !esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_fu_107_p2.read()))) {
                ap_NS_fsm = ap_ST_st5_fsm_4;
            } else if ((!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_fu_107_p2.read()))) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (esl_seteq<1,1,1>(tmp_2_fu_121_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            } else {
                ap_NS_fsm = ap_ST_st5_fsm_4;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        case 8 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_0, grp_fu_137_ap_done.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_4_reg_213.read())) && (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_4_reg_213.read()) || 
  !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_fu_143_p2.read())))) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_4_reg_213.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, grp_fu_137_ap_done.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_4_reg_213.read())) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_fu_143_p2.read()))) {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            } else {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<5>) ("XXXXX");
            break;
    }
}

void targeted_function::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_rm_AWVALID\" :  \"" << s_axi_rm_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_rm_AWREADY\" :  \"" << s_axi_rm_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_rm_AWADDR\" :  \"" << s_axi_rm_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_rm_WVALID\" :  \"" << s_axi_rm_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_rm_WREADY\" :  \"" << s_axi_rm_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_rm_WDATA\" :  \"" << s_axi_rm_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_rm_WSTRB\" :  \"" << s_axi_rm_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_rm_ARVALID\" :  \"" << s_axi_rm_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_rm_ARREADY\" :  \"" << s_axi_rm_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_rm_ARADDR\" :  \"" << s_axi_rm_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_rm_RVALID\" :  \"" << s_axi_rm_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_rm_RREADY\" :  \"" << s_axi_rm_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_rm_RDATA\" :  \"" << s_axi_rm_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_rm_RRESP\" :  \"" << s_axi_rm_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_rm_BVALID\" :  \"" << s_axi_rm_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_rm_BREADY\" :  \"" << s_axi_rm_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_rm_BRESP\" :  \"" << s_axi_rm_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

