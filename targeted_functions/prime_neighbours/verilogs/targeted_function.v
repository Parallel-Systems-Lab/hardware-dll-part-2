// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="targeted_function,hls_ip_2015_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.925500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1252,HLS_SYN_LUT=1705}" *)

module targeted_function (
        ap_clk,
        ap_rst_n,
        s_axi_rm_AWVALID,
        s_axi_rm_AWREADY,
        s_axi_rm_AWADDR,
        s_axi_rm_WVALID,
        s_axi_rm_WREADY,
        s_axi_rm_WDATA,
        s_axi_rm_WSTRB,
        s_axi_rm_ARVALID,
        s_axi_rm_ARREADY,
        s_axi_rm_ARADDR,
        s_axi_rm_RVALID,
        s_axi_rm_RREADY,
        s_axi_rm_RDATA,
        s_axi_rm_RRESP,
        s_axi_rm_BVALID,
        s_axi_rm_BREADY,
        s_axi_rm_BRESP,
        interrupt
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 10'b1;
parameter    ap_ST_st2_fsm_1 = 10'b10;
parameter    ap_ST_st3_fsm_2 = 10'b100;
parameter    ap_ST_st4_fsm_3 = 10'b1000;
parameter    ap_ST_st5_fsm_4 = 10'b10000;
parameter    ap_ST_st6_fsm_5 = 10'b100000;
parameter    ap_ST_st7_fsm_6 = 10'b1000000;
parameter    ap_ST_st8_fsm_7 = 10'b10000000;
parameter    ap_ST_st9_fsm_8 = 10'b100000000;
parameter    ap_ST_st10_fsm_9 = 10'b1000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    C_S_AXI_RM_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_RM_ADDR_WIDTH = 12;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_FFFFFFFF = 32'b11111111111111111111111111111111;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv31_1 = 31'b1;
parameter    ap_const_lv32_7FFFFFFF = 32'b1111111111111111111111111111111;
parameter    ap_const_lv31_7FFFFFFF = 31'b1111111111111111111111111111111;
parameter    ap_true = 1'b1;
parameter    C_S_AXI_RM_WSTRB_WIDTH = (C_S_AXI_RM_DATA_WIDTH / ap_const_int64_8);
parameter    C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_rm_AWVALID;
output   s_axi_rm_AWREADY;
input  [C_S_AXI_RM_ADDR_WIDTH - 1 : 0] s_axi_rm_AWADDR;
input   s_axi_rm_WVALID;
output   s_axi_rm_WREADY;
input  [C_S_AXI_RM_DATA_WIDTH - 1 : 0] s_axi_rm_WDATA;
input  [C_S_AXI_RM_WSTRB_WIDTH - 1 : 0] s_axi_rm_WSTRB;
input   s_axi_rm_ARVALID;
output   s_axi_rm_ARREADY;
input  [C_S_AXI_RM_ADDR_WIDTH - 1 : 0] s_axi_rm_ARADDR;
output   s_axi_rm_RVALID;
input   s_axi_rm_RREADY;
output  [C_S_AXI_RM_DATA_WIDTH - 1 : 0] s_axi_rm_RDATA;
output  [1:0] s_axi_rm_RRESP;
output   s_axi_rm_BVALID;
input   s_axi_rm_BREADY;
output  [1:0] s_axi_rm_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm = 10'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_28;
reg    ap_ready;
wire   [31:0] input_000;
reg   [31:0] output_000;
reg    output_000_ap_vld;
reg   [31:0] output_001;
reg    output_001_ap_vld;
wire   [31:0] ap_return;
wire    targeted_function_rm_s_axi_U_ap_dummy_ce;
reg   [31:0] input_000_read_reg_422;
wire   [0:0] tmp_2_fu_241_p2;
reg   [0:0] tmp_2_reg_436;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_89;
wire   [31:0] retval_2_cast_fu_246_p3;
reg   [31:0] retval_2_cast_reg_440;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_98;
wire   [31:0] tmp_4_fu_254_p2;
reg   [31:0] tmp_4_reg_444;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_107;
wire   [31:0] tmp_5_fu_308_p3;
reg   [31:0] tmp_5_reg_451;
wire   [31:0] i_2_fu_332_p2;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_118;
wire    grp_fu_321_ap_done;
wire   [0:0] tmp_3_fu_326_p2;
wire   [31:0] tmp_8_fu_338_p2;
reg   [31:0] tmp_8_reg_467;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_135;
wire   [31:0] tmp_9_fu_392_p3;
reg   [31:0] tmp_9_reg_474;
wire   [31:0] i_3_fu_416_p2;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_bdd_146;
wire    grp_fu_405_ap_done;
wire   [0:0] tmp_11_fu_410_p2;
reg   [31:0] output_000_promoted7_reg_76;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_163;
wire   [0:0] icmp_fu_230_p2;
reg   [31:0] output_001_promoted5_reg_88;
reg   [0:0] flag_0_reg_100;
reg   [31:0] output_000_promoted_reg_114;
wire   [0:0] tmp_1_fu_236_p2;
reg   [31:0] output_001_promoted4_reg_127;
wire   [0:0] flag_0_1_phi_fu_143_p4;
reg   [0:0] flag_0_1_reg_139;
reg   [31:0] output_001_promoted_reg_152;
reg   [0:0] flag_1_2_phi_fu_167_p4;
reg   [0:0] flag_1_2_reg_164;
reg   [31:0] tmp_12_reg_176;
reg   [31:0] i_reg_186;
reg   [31:0] tmp_15_reg_198;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_206;
wire   [0:0] tmp_7_fu_316_p2;
reg   [31:0] i_1_reg_208;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_bdd_233;
wire   [0:0] tmp_6_fu_400_p2;
wire   [30:0] tmp_fu_220_p4;
wire   [31:0] p_neg_fu_268_p2;
wire   [30:0] p_lshr_fu_274_p4;
wire   [31:0] tmp_13_fu_284_p1;
wire   [30:0] p_lshr_f_fu_294_p4;
wire   [0:0] tmp_17_fu_260_p3;
wire   [31:0] p_neg_t_fu_288_p2;
wire   [31:0] tmp_14_fu_304_p1;
wire   [31:0] grp_fu_321_p2;
wire   [30:0] p_neg3_cast_fu_352_p4;
wire   [30:0] p_lshr4_fu_362_p2;
wire   [31:0] p_lshr4_cast_fu_368_p1;
wire   [30:0] p_lshr_f6_fu_378_p4;
wire   [0:0] tmp_18_fu_344_p3;
wire   [31:0] p_neg_t5_fu_372_p2;
wire   [31:0] tmp_16_fu_388_p1;
wire   [31:0] grp_fu_405_p2;
reg    grp_fu_321_ap_start;
wire    grp_fu_321_ce;
reg    grp_fu_405_ap_start;
wire    grp_fu_405_ce;
reg   [9:0] ap_NS_fsm;


targeted_function_rm_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_RM_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_RM_DATA_WIDTH ))
targeted_function_rm_s_axi_U(
    .AWVALID( s_axi_rm_AWVALID ),
    .AWREADY( s_axi_rm_AWREADY ),
    .AWADDR( s_axi_rm_AWADDR ),
    .WVALID( s_axi_rm_WVALID ),
    .WREADY( s_axi_rm_WREADY ),
    .WDATA( s_axi_rm_WDATA ),
    .WSTRB( s_axi_rm_WSTRB ),
    .ARVALID( s_axi_rm_ARVALID ),
    .ARREADY( s_axi_rm_ARREADY ),
    .ARADDR( s_axi_rm_ARADDR ),
    .RVALID( s_axi_rm_RVALID ),
    .RREADY( s_axi_rm_RREADY ),
    .RDATA( s_axi_rm_RDATA ),
    .RRESP( s_axi_rm_RRESP ),
    .BVALID( s_axi_rm_BVALID ),
    .BREADY( s_axi_rm_BREADY ),
    .BRESP( s_axi_rm_BRESP ),
    .ACLK( ap_clk ),
    .ARESET( ap_rst_n_inv ),
    .ACLK_EN( targeted_function_rm_s_axi_U_ap_dummy_ce ),
    .ap_start( ap_start ),
    .interrupt( interrupt ),
    .ap_ready( ap_ready ),
    .ap_done( ap_done ),
    .ap_idle( ap_idle ),
    .ap_return( ap_return ),
    .input_000( input_000 ),
    .output_000( output_000 ),
    .output_000_ap_vld( output_000_ap_vld ),
    .output_001( output_001 ),
    .output_001_ap_vld( output_001_ap_vld )
);

targeted_function_srem_32ns_32ns_32_36_seq #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
targeted_function_srem_32ns_32ns_32_36_seq_U0(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .start( grp_fu_321_ap_start ),
    .done( grp_fu_321_ap_done ),
    .din0( tmp_4_reg_444 ),
    .din1( i_reg_186 ),
    .ce( grp_fu_321_ce ),
    .dout( grp_fu_321_p2 )
);

targeted_function_srem_32ns_32ns_32_36_seq #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
targeted_function_srem_32ns_32ns_32_36_seq_U1(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .start( grp_fu_405_ap_start ),
    .done( grp_fu_405_ap_done ),
    .din0( tmp_8_reg_467 ),
    .din1( i_1_reg_208 ),
    .ce( grp_fu_405_ce ),
    .dout( grp_fu_405_p2 )
);



always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        if ((ap_const_lv1_0 == tmp_1_fu_236_p2)) begin
            flag_0_1_reg_139 <= flag_0_reg_100;
        end else if (~(ap_const_lv1_0 == tmp_1_fu_236_p2)) begin
            flag_0_1_reg_139 <= ap_const_lv1_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & (ap_const_lv1_0 == icmp_fu_230_p2))) begin
        flag_0_reg_100 <= ap_const_lv1_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        flag_0_reg_100 <= ap_const_lv1_1;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        if ((tmp_2_reg_436 == ap_const_lv1_0)) begin
            flag_1_2_reg_164 <= flag_0_1_reg_139;
        end else if (~(tmp_2_reg_436 == ap_const_lv1_0)) begin
            flag_1_2_reg_164 <= ap_const_lv1_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) & ~(ap_const_logic_0 == grp_fu_405_ap_done) & (ap_const_lv1_0 == tmp_11_fu_410_p2))) begin
        i_1_reg_208 <= i_3_fu_416_p2;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        i_1_reg_208 <= ap_const_lv32_2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & ~(ap_const_logic_0 == grp_fu_321_ap_done) & (tmp_3_fu_326_p2 == ap_const_lv1_0))) begin
        i_reg_186 <= i_2_fu_332_p2;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        i_reg_186 <= ap_const_lv32_2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & (ap_const_lv1_0 == icmp_fu_230_p2))) begin
        output_000_promoted7_reg_76 <= input_000;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_000_promoted7_reg_76 <= ap_const_lv32_FFFFFFFF;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        if ((ap_const_lv1_0 == tmp_1_fu_236_p2)) begin
            output_000_promoted_reg_114 <= output_000_promoted7_reg_76;
        end else if (~(ap_const_lv1_0 == tmp_1_fu_236_p2)) begin
            output_000_promoted_reg_114 <= ap_const_lv32_FFFFFFFF;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        if ((ap_const_lv1_0 == tmp_1_fu_236_p2)) begin
            output_001_promoted4_reg_127 <= output_001_promoted5_reg_88;
        end else if (~(ap_const_lv1_0 == tmp_1_fu_236_p2)) begin
            output_001_promoted4_reg_127 <= ap_const_lv32_3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & (ap_const_lv1_0 == icmp_fu_230_p2))) begin
        output_001_promoted5_reg_88 <= input_000;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_001_promoted5_reg_88 <= ap_const_lv32_2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        if ((tmp_2_reg_436 == ap_const_lv1_0)) begin
            output_001_promoted_reg_152 <= output_001_promoted4_reg_127;
        end else if (~(tmp_2_reg_436 == ap_const_lv1_0)) begin
            output_001_promoted_reg_152 <= ap_const_lv32_FFFFFFFF;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & ~(ap_const_logic_0 == grp_fu_321_ap_done) & ~(tmp_3_fu_326_p2 == ap_const_lv1_0))) begin
        tmp_12_reg_176 <= tmp_4_reg_444;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == flag_0_1_phi_fu_143_p4))) begin
        tmp_12_reg_176 <= output_000_promoted_reg_114;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) & ~(ap_const_logic_0 == grp_fu_405_ap_done) & ~(ap_const_lv1_0 == tmp_11_fu_410_p2))) begin
        tmp_15_reg_198 <= tmp_8_reg_467;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & (((ap_const_lv1_0 == flag_1_2_reg_164) & ~(ap_const_lv1_0 == flag_0_1_reg_139)) | ((ap_const_lv1_0 == flag_1_2_reg_164) & ~(ap_const_lv1_0 == tmp_7_fu_316_p2))))) begin
        tmp_15_reg_198 <= output_001_promoted_reg_152;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        input_000_read_reg_422 <= input_000;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        retval_2_cast_reg_440 <= retval_2_cast_fu_246_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        tmp_2_reg_436 <= tmp_2_fu_241_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        tmp_4_reg_444 <= tmp_4_fu_254_p2;
        tmp_5_reg_451 <= tmp_5_fu_308_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        tmp_8_reg_467 <= tmp_8_fu_338_p2;
        tmp_9_reg_474 <= tmp_9_fu_392_p3;
    end
end

always @ (flag_1_2_reg_164 or ap_sig_cseq_ST_st9_fsm_8 or tmp_6_fu_400_p2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8) & (~(ap_const_lv1_0 == tmp_6_fu_400_p2) | ~(ap_const_lv1_0 == flag_1_2_reg_164)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (flag_1_2_reg_164 or ap_sig_cseq_ST_st9_fsm_8 or tmp_6_fu_400_p2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8) & (~(ap_const_lv1_0 == tmp_6_fu_400_p2) | ~(ap_const_lv1_0 == flag_1_2_reg_164)))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_146) begin
    if (ap_sig_bdd_146) begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_28) begin
    if (ap_sig_bdd_28) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_163) begin
    if (ap_sig_bdd_163) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_89) begin
    if (ap_sig_bdd_89) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_98) begin
    if (ap_sig_bdd_98) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_107) begin
    if (ap_sig_bdd_107) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_206) begin
    if (ap_sig_bdd_206) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_118) begin
    if (ap_sig_bdd_118) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_135) begin
    if (ap_sig_bdd_135) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_233) begin
    if (ap_sig_bdd_233) begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    end
end

always @ (tmp_2_reg_436 or ap_sig_cseq_ST_st4_fsm_3 or flag_0_1_reg_139) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        if ((tmp_2_reg_436 == ap_const_lv1_0)) begin
            flag_1_2_phi_fu_167_p4 = flag_0_1_reg_139;
        end else if (~(tmp_2_reg_436 == ap_const_lv1_0)) begin
            flag_1_2_phi_fu_167_p4 = ap_const_lv1_1;
        end else begin
            flag_1_2_phi_fu_167_p4 = 'bx;
        end
    end else begin
        flag_1_2_phi_fu_167_p4 = 'bx;
    end
end

always @ (flag_0_1_reg_139 or ap_sig_cseq_ST_st6_fsm_5 or tmp_7_fu_316_p2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & (ap_const_lv1_0 == flag_0_1_reg_139) & (ap_const_lv1_0 == tmp_7_fu_316_p2))) begin
        grp_fu_321_ap_start = ap_const_logic_1;
    end else begin
        grp_fu_321_ap_start = ap_const_logic_0;
    end
end

always @ (flag_1_2_reg_164 or ap_sig_cseq_ST_st9_fsm_8 or tmp_6_fu_400_p2) begin
    if (((ap_const_lv1_0 == flag_1_2_reg_164) & (ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8) & (ap_const_lv1_0 == tmp_6_fu_400_p2))) begin
        grp_fu_405_ap_start = ap_const_logic_1;
    end else begin
        grp_fu_405_ap_start = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or input_000 or ap_sig_cseq_ST_st3_fsm_2 or tmp_4_reg_444 or ap_sig_cseq_ST_st2_fsm_1 or tmp_1_fu_236_p2 or flag_0_1_reg_139 or ap_sig_cseq_ST_st6_fsm_5 or tmp_7_fu_316_p2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & (ap_const_lv1_0 == flag_0_1_reg_139) & ~(ap_const_lv1_0 == tmp_7_fu_316_p2))) begin
        output_000 = tmp_4_reg_444;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == tmp_1_fu_236_p2)))) begin
        output_000 = ap_const_lv32_FFFFFFFF;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        output_000 = input_000;
    end else begin
        output_000 = 'bx;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st3_fsm_2 or ap_sig_cseq_ST_st2_fsm_1 or tmp_1_fu_236_p2 or flag_0_1_reg_139 or ap_sig_cseq_ST_st6_fsm_5 or tmp_7_fu_316_p2) begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == tmp_1_fu_236_p2)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & (ap_const_lv1_0 == flag_0_1_reg_139) & ~(ap_const_lv1_0 == tmp_7_fu_316_p2)))) begin
        output_000_ap_vld = ap_const_logic_1;
    end else begin
        output_000_ap_vld = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or input_000 or tmp_2_reg_436 or ap_sig_cseq_ST_st3_fsm_2 or ap_sig_cseq_ST_st4_fsm_3 or tmp_8_reg_467 or ap_sig_cseq_ST_st2_fsm_1 or tmp_1_fu_236_p2 or flag_1_2_reg_164 or ap_sig_cseq_ST_st9_fsm_8 or tmp_6_fu_400_p2) begin
    if (((ap_const_lv1_0 == flag_1_2_reg_164) & (ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8) & ~(ap_const_lv1_0 == tmp_6_fu_400_p2))) begin
        output_001 = tmp_8_reg_467;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(tmp_2_reg_436 == ap_const_lv1_0))) begin
        output_001 = ap_const_lv32_FFFFFFFF;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == tmp_1_fu_236_p2))) begin
        output_001 = ap_const_lv32_3;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_001 = ap_const_lv32_2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        output_001 = input_000;
    end else begin
        output_001 = 'bx;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or tmp_2_reg_436 or ap_sig_cseq_ST_st3_fsm_2 or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_st2_fsm_1 or tmp_1_fu_236_p2 or flag_1_2_reg_164 or ap_sig_cseq_ST_st9_fsm_8 or tmp_6_fu_400_p2) begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == tmp_1_fu_236_p2)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(tmp_2_reg_436 == ap_const_lv1_0)) | ((ap_const_lv1_0 == flag_1_2_reg_164) & (ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8) & ~(ap_const_lv1_0 == tmp_6_fu_400_p2)))) begin
        output_001_ap_vld = ap_const_logic_1;
    end else begin
        output_001_ap_vld = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or grp_fu_321_ap_done or tmp_3_fu_326_p2 or grp_fu_405_ap_done or tmp_11_fu_410_p2 or icmp_fu_230_p2 or flag_0_1_phi_fu_143_p4 or flag_0_1_reg_139 or flag_1_2_reg_164 or tmp_7_fu_316_p2 or tmp_6_fu_400_p2) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if ((~(ap_start == ap_const_logic_0) & (ap_const_lv1_0 == icmp_fu_230_p2))) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else if ((~(ap_start == ap_const_logic_0) & ~(ap_const_lv1_0 == icmp_fu_230_p2))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            if (~(ap_const_lv1_0 == flag_0_1_phi_fu_143_p4)) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            if (((~(ap_const_lv1_0 == flag_0_1_reg_139) & ~(ap_const_lv1_0 == flag_1_2_reg_164)) | (~(ap_const_lv1_0 == tmp_7_fu_316_p2) & ~(ap_const_lv1_0 == flag_1_2_reg_164)))) begin
                ap_NS_fsm = ap_ST_st9_fsm_8;
            end else if ((((ap_const_lv1_0 == flag_1_2_reg_164) & ~(ap_const_lv1_0 == flag_0_1_reg_139)) | ((ap_const_lv1_0 == flag_1_2_reg_164) & ~(ap_const_lv1_0 == tmp_7_fu_316_p2)))) begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end else begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end
        end
        ap_ST_st7_fsm_6 : 
        begin
            if ((~(ap_const_logic_0 == grp_fu_321_ap_done) & (tmp_3_fu_326_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else if ((~(ap_const_logic_0 == grp_fu_321_ap_done) & ~(tmp_3_fu_326_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end else begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            if ((~(ap_const_lv1_0 == tmp_6_fu_400_p2) | ~(ap_const_lv1_0 == flag_1_2_reg_164))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st10_fsm_9;
            end
        end
        ap_ST_st10_fsm_9 : 
        begin
            if ((~(ap_const_logic_0 == grp_fu_405_ap_done) & (ap_const_lv1_0 == tmp_11_fu_410_p2))) begin
                ap_NS_fsm = ap_ST_st9_fsm_8;
            end else if ((~(ap_const_logic_0 == grp_fu_405_ap_done) & ~(ap_const_lv1_0 == tmp_11_fu_410_p2))) begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end else begin
                ap_NS_fsm = ap_ST_st10_fsm_9;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


assign ap_return = retval_2_cast_reg_440;


always @ (ap_rst_n) begin
    ap_rst_n_inv = ~ap_rst_n;
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_107 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_118 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_135 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_146 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_163 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_206 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_233 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_28 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_89 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_98 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

assign flag_0_1_phi_fu_143_p4 = flag_0_1_reg_139;

assign grp_fu_321_ce = ap_const_logic_1;

assign grp_fu_405_ce = ap_const_logic_1;

assign i_2_fu_332_p2 = (i_reg_186 + ap_const_lv32_1);

assign i_3_fu_416_p2 = (i_1_reg_208 + ap_const_lv32_1);

assign icmp_fu_230_p2 = ($signed(tmp_fu_220_p4) < $signed(31'b1)? 1'b1: 1'b0);

assign p_lshr4_cast_fu_368_p1 = p_lshr4_fu_362_p2;

assign p_lshr4_fu_362_p2 = (p_neg3_cast_fu_352_p4 ^ ap_const_lv31_7FFFFFFF);

assign p_lshr_f6_fu_378_p4 = {{tmp_8_fu_338_p2[ap_const_lv32_1F : ap_const_lv32_1]}};

assign p_lshr_f_fu_294_p4 = {{tmp_4_fu_254_p2[ap_const_lv32_1F : ap_const_lv32_1]}};

assign p_lshr_fu_274_p4 = {{p_neg_fu_268_p2[ap_const_lv32_1F : ap_const_lv32_1]}};

assign p_neg3_cast_fu_352_p4 = {{tmp_15_reg_198[ap_const_lv32_1F : ap_const_lv32_1]}};

assign p_neg_fu_268_p2 = (ap_const_lv32_1 - tmp_12_reg_176);

assign p_neg_t5_fu_372_p2 = (ap_const_lv32_0 - p_lshr4_cast_fu_368_p1);

assign p_neg_t_fu_288_p2 = (ap_const_lv32_0 - tmp_13_fu_284_p1);

assign retval_2_cast_fu_246_p3 = ((flag_1_2_phi_fu_167_p4[0:0] === 1'b1) ? ap_const_lv32_FFFFFFFF : ap_const_lv32_0);

assign targeted_function_rm_s_axi_U_ap_dummy_ce = ap_const_logic_1;

assign tmp_11_fu_410_p2 = (grp_fu_405_p2 == ap_const_lv32_0? 1'b1: 1'b0);

assign tmp_13_fu_284_p1 = p_lshr_fu_274_p4;

assign tmp_14_fu_304_p1 = p_lshr_f_fu_294_p4;

assign tmp_16_fu_388_p1 = p_lshr_f6_fu_378_p4;

assign tmp_17_fu_260_p3 = tmp_4_fu_254_p2[ap_const_lv32_1F];

assign tmp_18_fu_344_p3 = tmp_8_fu_338_p2[ap_const_lv32_1F];

assign tmp_1_fu_236_p2 = (input_000_read_reg_422 == ap_const_lv32_2? 1'b1: 1'b0);

assign tmp_2_fu_241_p2 = (input_000_read_reg_422 == ap_const_lv32_7FFFFFFF? 1'b1: 1'b0);

assign tmp_3_fu_326_p2 = (grp_fu_321_p2 == ap_const_lv32_0? 1'b1: 1'b0);

assign tmp_4_fu_254_p2 = ($signed(tmp_12_reg_176) + $signed(ap_const_lv32_FFFFFFFF));

assign tmp_5_fu_308_p3 = ((tmp_17_fu_260_p3[0:0] === 1'b1) ? p_neg_t_fu_288_p2 : tmp_14_fu_304_p1);

assign tmp_6_fu_400_p2 = ($signed(i_1_reg_208) > $signed(tmp_9_reg_474)? 1'b1: 1'b0);

assign tmp_7_fu_316_p2 = ($signed(i_reg_186) > $signed(tmp_5_reg_451)? 1'b1: 1'b0);

assign tmp_8_fu_338_p2 = (tmp_15_reg_198 + ap_const_lv32_1);

assign tmp_9_fu_392_p3 = ((tmp_18_fu_344_p3[0:0] === 1'b1) ? p_neg_t5_fu_372_p2 : tmp_16_fu_388_p1);

assign tmp_fu_220_p4 = {{input_000[ap_const_lv32_1F : ap_const_lv32_1]}};


endmodule //targeted_function

