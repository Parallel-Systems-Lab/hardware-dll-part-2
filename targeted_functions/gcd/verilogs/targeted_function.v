// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="targeted_function,hls_ip_2015_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.810000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=539,HLS_SYN_LUT=920}" *)

module targeted_function (
        ap_clk,
        ap_rst_n,
        s_axi_rm_AWVALID,
        s_axi_rm_AWREADY,
        s_axi_rm_AWADDR,
        s_axi_rm_WVALID,
        s_axi_rm_WREADY,
        s_axi_rm_WDATA,
        s_axi_rm_WSTRB,
        s_axi_rm_ARVALID,
        s_axi_rm_ARREADY,
        s_axi_rm_ARADDR,
        s_axi_rm_RVALID,
        s_axi_rm_RREADY,
        s_axi_rm_RDATA,
        s_axi_rm_RRESP,
        s_axi_rm_BVALID,
        s_axi_rm_BREADY,
        s_axi_rm_BRESP,
        interrupt
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 4'b1;
parameter    ap_ST_st2_fsm_1 = 4'b10;
parameter    ap_ST_st3_fsm_2 = 4'b100;
parameter    ap_ST_st4_fsm_3 = 4'b1000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    C_S_AXI_RM_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_RM_ADDR_WIDTH = 12;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_FFFFFFFF = 32'b11111111111111111111111111111111;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_true = 1'b1;
parameter    C_S_AXI_RM_WSTRB_WIDTH = (C_S_AXI_RM_DATA_WIDTH / ap_const_int64_8);
parameter    C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_rm_AWVALID;
output   s_axi_rm_AWREADY;
input  [C_S_AXI_RM_ADDR_WIDTH - 1 : 0] s_axi_rm_AWADDR;
input   s_axi_rm_WVALID;
output   s_axi_rm_WREADY;
input  [C_S_AXI_RM_DATA_WIDTH - 1 : 0] s_axi_rm_WDATA;
input  [C_S_AXI_RM_WSTRB_WIDTH - 1 : 0] s_axi_rm_WSTRB;
input   s_axi_rm_ARVALID;
output   s_axi_rm_ARREADY;
input  [C_S_AXI_RM_ADDR_WIDTH - 1 : 0] s_axi_rm_ARADDR;
output   s_axi_rm_RVALID;
input   s_axi_rm_RREADY;
output  [C_S_AXI_RM_DATA_WIDTH - 1 : 0] s_axi_rm_RDATA;
output  [1:0] s_axi_rm_RRESP;
output   s_axi_rm_BVALID;
input   s_axi_rm_BREADY;
output  [1:0] s_axi_rm_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm = 4'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_22;
reg    ap_ready;
wire   [31:0] input_000;
wire   [31:0] input_001;
reg   [31:0] output_000;
reg    output_000_ap_vld;
wire   [31:0] ap_return;
wire    targeted_function_rm_s_axi_U_ap_dummy_ce;
wire   [31:0] grp_fu_140_p2;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_84;
wire    grp_fu_140_ap_done;
reg   [31:0] input_000_assign_reg_56;
wire   [0:0] tmp_2_fu_105_p2;
wire   [0:0] tmp_1_fu_99_p2;
reg   [31:0] p_1_reg_66;
reg   [0:0] p_0_reg_77;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_113;
wire   [0:0] tmp_6_fu_134_p2;
wire   [31:0] input_001_assign_fu_125_p3;
wire   [31:0] tmp_9_fu_160_p3;
wire   [31:0] tmp_fu_93_p2;
wire   [0:0] tmp_3_fu_111_p3;
wire   [31:0] tmp_4_fu_119_p2;
wire   [0:0] tmp_5_fu_146_p3;
wire   [31:0] tmp_8_fu_154_p2;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_163;
reg    grp_fu_140_ap_start;
wire    grp_fu_140_ce;
reg   [3:0] ap_NS_fsm;


targeted_function_rm_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_RM_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_RM_DATA_WIDTH ))
targeted_function_rm_s_axi_U(
    .AWVALID( s_axi_rm_AWVALID ),
    .AWREADY( s_axi_rm_AWREADY ),
    .AWADDR( s_axi_rm_AWADDR ),
    .WVALID( s_axi_rm_WVALID ),
    .WREADY( s_axi_rm_WREADY ),
    .WDATA( s_axi_rm_WDATA ),
    .WSTRB( s_axi_rm_WSTRB ),
    .ARVALID( s_axi_rm_ARVALID ),
    .ARREADY( s_axi_rm_ARREADY ),
    .ARADDR( s_axi_rm_ARADDR ),
    .RVALID( s_axi_rm_RVALID ),
    .RREADY( s_axi_rm_RREADY ),
    .RDATA( s_axi_rm_RDATA ),
    .RRESP( s_axi_rm_RRESP ),
    .BVALID( s_axi_rm_BVALID ),
    .BREADY( s_axi_rm_BREADY ),
    .BRESP( s_axi_rm_BRESP ),
    .ACLK( ap_clk ),
    .ARESET( ap_rst_n_inv ),
    .ACLK_EN( targeted_function_rm_s_axi_U_ap_dummy_ce ),
    .ap_start( ap_start ),
    .interrupt( interrupt ),
    .ap_ready( ap_ready ),
    .ap_done( ap_done ),
    .ap_idle( ap_idle ),
    .ap_return( ap_return ),
    .input_000( input_000 ),
    .input_001( input_001 ),
    .output_000( output_000 ),
    .output_000_ap_vld( output_000_ap_vld )
);

targeted_function_srem_32ns_32ns_32_36_seq #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
targeted_function_srem_32ns_32ns_32_36_seq_U0(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .start( grp_fu_140_ap_start ),
    .done( grp_fu_140_ap_done ),
    .din0( p_1_reg_66 ),
    .din1( input_000_assign_reg_56 ),
    .ce( grp_fu_140_ce ),
    .dout( grp_fu_140_p2 )
);



always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & (tmp_2_fu_105_p2 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_1_fu_99_p2))) begin
        input_000_assign_reg_56 <= input_001;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_logic_0 == grp_fu_140_ap_done))) begin
        input_000_assign_reg_56 <= grp_fu_140_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & (ap_const_lv1_0 == tmp_1_fu_99_p2) & ~(tmp_2_fu_105_p2 == ap_const_lv1_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_lv1_0 == tmp_6_fu_134_p2)))) begin
        p_0_reg_77 <= ap_const_lv1_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & ~(ap_const_lv1_0 == tmp_1_fu_99_p2))) begin
        p_0_reg_77 <= ap_const_lv1_1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & (tmp_2_fu_105_p2 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_1_fu_99_p2))) begin
        p_1_reg_66 <= input_000;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_logic_0 == grp_fu_140_ap_done))) begin
        p_1_reg_66 <= input_000_assign_reg_56;
    end
end

always @ (ap_sig_cseq_ST_st4_fsm_3) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st4_fsm_3) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_22) begin
    if (ap_sig_bdd_22) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_113) begin
    if (ap_sig_bdd_113) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_84) begin
    if (ap_sig_bdd_84) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_163) begin
    if (ap_sig_bdd_163) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st2_fsm_1 or tmp_6_fu_134_p2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (ap_const_lv1_0 == tmp_6_fu_134_p2))) begin
        grp_fu_140_ap_start = ap_const_logic_1;
    end else begin
        grp_fu_140_ap_start = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or tmp_2_fu_105_p2 or tmp_1_fu_99_p2 or ap_sig_cseq_ST_st2_fsm_1 or tmp_6_fu_134_p2 or input_001_assign_fu_125_p3 or tmp_9_fu_160_p3) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_lv1_0 == tmp_6_fu_134_p2))) begin
        output_000 = tmp_9_fu_160_p3;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & ~(ap_const_lv1_0 == tmp_1_fu_99_p2))) begin
        output_000 = ap_const_lv32_FFFFFFFF;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & (ap_const_lv1_0 == tmp_1_fu_99_p2) & ~(tmp_2_fu_105_p2 == ap_const_lv1_0))) begin
        output_000 = input_001_assign_fu_125_p3;
    end else begin
        output_000 = 'bx;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or tmp_2_fu_105_p2 or tmp_1_fu_99_p2 or ap_sig_cseq_ST_st2_fsm_1 or tmp_6_fu_134_p2) begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & ~(ap_const_lv1_0 == tmp_1_fu_99_p2)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & (ap_const_lv1_0 == tmp_1_fu_99_p2) & ~(tmp_2_fu_105_p2 == ap_const_lv1_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_lv1_0 == tmp_6_fu_134_p2)))) begin
        output_000_ap_vld = ap_const_logic_1;
    end else begin
        output_000_ap_vld = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or grp_fu_140_ap_done or tmp_2_fu_105_p2 or tmp_1_fu_99_p2 or tmp_6_fu_134_p2) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if ((~(ap_start == ap_const_logic_0) & (~(ap_const_lv1_0 == tmp_1_fu_99_p2) | ~(tmp_2_fu_105_p2 == ap_const_lv1_0)))) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else if ((~(ap_start == ap_const_logic_0) & (tmp_2_fu_105_p2 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_1_fu_99_p2))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(ap_const_lv1_0 == tmp_6_fu_134_p2)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if (~(ap_const_logic_0 == grp_fu_140_ap_done)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


assign ap_return = ((p_0_reg_77[0:0] === 1'b1) ? ap_const_lv32_FFFFFFFF : ap_const_lv32_0);


always @ (ap_rst_n) begin
    ap_rst_n_inv = ~ap_rst_n;
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_113 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_163 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_22 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_84 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

assign grp_fu_140_ce = ap_const_logic_1;

assign input_001_assign_fu_125_p3 = ((tmp_3_fu_111_p3[0:0] === 1'b1) ? tmp_4_fu_119_p2 : input_001);

assign targeted_function_rm_s_axi_U_ap_dummy_ce = ap_const_logic_1;

assign tmp_1_fu_99_p2 = (tmp_fu_93_p2 == ap_const_lv32_0? 1'b1: 1'b0);

assign tmp_2_fu_105_p2 = (input_000 == ap_const_lv32_0? 1'b1: 1'b0);

assign tmp_3_fu_111_p3 = input_001[ap_const_lv32_1F];

assign tmp_4_fu_119_p2 = (ap_const_lv32_0 - input_001);

assign tmp_5_fu_146_p3 = p_1_reg_66[ap_const_lv32_1F];

assign tmp_6_fu_134_p2 = (input_000_assign_reg_56 == ap_const_lv32_0? 1'b1: 1'b0);

assign tmp_8_fu_154_p2 = (ap_const_lv32_0 - p_1_reg_66);

assign tmp_9_fu_160_p3 = ((tmp_5_fu_146_p3[0:0] === 1'b1) ? tmp_8_fu_154_p2 : p_1_reg_66);

assign tmp_fu_93_p2 = (input_001 | input_000);


endmodule //targeted_function

